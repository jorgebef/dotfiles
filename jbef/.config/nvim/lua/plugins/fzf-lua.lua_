local M = {
  "ibhagwan/fzf-lua",
  -- optional for icon support
  dependencies = { "nvim-tree/nvim-web-devicons" },
}

function M.config()
  local fzf = require("fzf-lua")
  local actions = require("fzf-lua.actions")
  -- calling `setup` is optional for customization
  fzf.setup({
    "telescope",
    winopts = {
      preview = {
        default = "bat",
      },
    },
    files = {
      previewer = "bat", -- uncomment to override previewer
      -- (name from 'previewers' table)
      -- set to 'false' to disable
      prompt = "Files❯ ",
      multiprocess = true, -- run command in a separate process
      git_icons = false, -- show git icons?
      file_icons = true, -- show file icons?
      color_icons = true, -- colorize file|git icons
      -- path_shorten   = 1,              -- 'true' or number, shorten path?
      -- Uncomment for custom vscode-like formatter where the filename is first:
      -- e.g. "fzf-lua/previewer/fzf.lua" => "fzf.lua previewer/fzf-lua"
      -- formatter      = "path.filename_first",
      -- executed command priority is 'cmd' (if exists)
      -- otherwise auto-detect prioritizes `fd`:`rg`:`find`
      -- default options are controlled by 'fd|rg|find|_opts'
      -- NOTE: 'find -printf' requires GNU find
      -- cmd            = "find . -type f -printf '%P\n'",
      find_opts = [[-type f -not -path '*/\.git/*' -printf '%P\n']],
      rg_opts = [[--color=never --files --hidden --follow -g "!.git"]],
      fd_opts = [[--color=never --type f --hidden --follow --exclude .git]],
      -- by default, cwd appears in the header only if {opts} contain a cwd
      -- parameter to a different folder than the current working directory
      -- uncomment if you wish to force display of the cwd as part of the
      -- query prompt string (fzf.vim style), header line or both
      -- cwd_header = true,
      cwd_prompt = true,
      cwd_prompt_shorten_len = 32, -- shorten prompt beyond this length
      cwd_prompt_shorten_val = 1, -- shortened path parts length
      toggle_ignore_flag = "--no-ignore", -- flag toggled in `actions.toggle_ignore`
      toggle_hidden_flag = "--hidden", -- flag toggled in `actions.toggle_hidden`
      actions = {
        -- inherits from 'actions.files', here we can override
        -- or set bind to 'false' to disable a default action
        -- action to toggle `--no-ignore`, requires fd or rg installed
        ["ctrl-g"] = { actions.toggle_ignore },
        -- uncomment to override `actions.file_edit_or_qf`
        --   ["default"]   = actions.file_edit,
        -- custom actions are available too
        --   ["ctrl-y"]    = function(selected) print(selected[1]) end,
      },
    },
    grep = {
      -- cmd = "rg --vimgrep",
      rg_opts = "--column --hidden --line-number --no-heading --color=always --smart-case --max-columns=4096 -e",
      actions = {
        ["ctrl-i"] = { actions.toggle_ignore },
      },
    },
    fzf_colors = true,
  })

  -- local nsn_opts = { noremap = true, silent = true, nowait = true }
  -- vim.keymap.set("n", "<leader>ff", function()
  --   fzf.files()
  -- end, nsn_opts)
  -- vim.keymap.set("n", "<leader>fg", function()
  --   fzf.live_grep()
  -- end, nsn_opts)
  -- vim.keymap.set("n", "<leader>fr", function()
  --   fzf.resume()
  -- end, nsn_opts)
end

return M
