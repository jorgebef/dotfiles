local M = {
  "glepnir/lspsaga.nvim",
  branch = "main",
  event = "BufRead",
  dependencies = {
    { "nvim-tree/nvim-web-devicons" },
    --Please make sure you install markdown and markdown_inline parser
    { "nvim-treesitter/nvim-treesitter" },
  },
}

function M.config()
  local cp = require("catppuccin.palettes").get_palette()
  local keymap = vim.keymap.set
  local saga = require("lspsaga")
  -- local saga_diagnostic = require("lspsaga.diagnostic")
  -- local lspsaga_diagnostic = require("lspsaga.diagnostic")

  -- saga.init_lsp_saga({
  saga.setup({
    -- Options with default value
    -- "single" | "double" | "rounded" | "bold" | "plus"
    -- border_style = "rounded",
    --the range of 0 for fully opaque window (disabled) to 100 for fully
    --transparent background. Values between 0-30 are typically most useful.
    saga_winblend = 0,
    -- when cursor in saga window you config these to move
    move_in_saga = { prev = "<C-p>", next = "<C-n>" },
    diagnostic_header = { "üôÄ", "üòø", "üòæ", "üò∫" },
    diagnostic = {
      show_code_action = false,
      show_source = true,
      jump_num_shortcut = true,
      --1 is max
      max_width = 0.7,
      custom_fix = nil,
      custom_msg = nil,
      text_hl_follow = false,
      border_follow = true,
      keys = {
        exec_action = "o",
        quit = "q",
        go_action = "g",
      },
    },
    -- preview lines above of lsp_finder
    preview_lines_above = 0,
    -- preview lines of lsp_finder and definition preview
    max_preview_lines = 20,
    -- use emoji lightbulb in default
    code_action_icon = "üí°",
    -- if true can press number to execute the codeaction in codeaction window
    code_action_num_shortcut = true,
    -- same as nvim-lightbulb but async
    -- code_action_lightbulb = {
    --   enable = true,
    --   enable_in_insert = true,
    --   cache_code_action = true,
    --   sign = false,
    --   update_time = 150,
    --   sign_priority = 20,
    --   virtual_text = true,
    -- },
    ui = {
      -- currently only round theme
      theme = "round",
      -- border type can be single,double,rounded,solid,shadow.
      border = "rounded",
      winblend = 0,
      expand = "ÔÅî",
      collapse = "ÔÅ∏",
      preview = "Ó¨Ø ",
      code_action = "üí°",
      diagnostic = "üôÄ ",
      incoming = "Ô£∂ ",
      outgoing = "Ô£∫ ",
      colors = {
        --float window normal background color
        -- normal_bg = "#1d1536",
        normal_bg = cp.base,
        --title background color
        title_bg = "#afd700",
        red = "#e95678",
        magenta = "#b33076",
        orange = "#FF8700",
        yellow = "#f7bb3b",
        green = "#afd700",
        cyan = "#36d0e0",
        blue = "#61afef",
        purple = "#CBA6F7",
        white = "#d1d4cf",
        black = "#1c1c19",
      },
      kind = {},
    },
    lightbulb = {
      enable = true,
      enable_in_insert = true,
      sign = true,
      sign_priority = 40,
      virtual_text = true,
    },
    -- finder icons
    finder_icons = {
      def = "Óàï  ",
      ref = "Ô™æ ",
      link = "Ô†∏  ",
    },
    -- finder do lsp request timeout
    -- if your project big enough or your server very slow
    -- you may need to increase this value
    finder_request_timeout = 1500,
    finder_action_keys = {
      open = { "o", "<CR>" },
      vsplit = "s",
      split = "i",
      tabe = "t",
      -- quit = { "q", "<ESC>" },
      quit = { "q", "<ESC>", "<leader><ESC>" },
    },
    code_action = {
      num_shortcut = true,
      keys = {
        quit = "<Esc>",
        exec = "<CR>",
      },
    },
    -- definition_action_keys = {
    --   -- edit = "<C-c>o",
    --   edit = "<CR>",
    --   -- vsplit = "<C-c>v",
    --   vsplit = "<C-v>",
    --   split = "<C-c>i",
    --   tabe = "<C-c>t",
    --   -- quit = "q",
    --   quit = "<leader><ESC>",
    -- },
    definition = {
      edit = "<C-c>o",
      vsplit = "<C-c>v",
      split = "<C-c>i",
      tabe = "<C-c>t",
      quit = "q",
      close = "<Esc>",
    },
    -- rename_action_quit = "<C-c>",
    -- rename_action_quit = "<leader><ESC>",
    rename = {
      quit = "<leader><ESC>",
      exec = "<CR>",
      mark = "x",
      confirm = "<CR>",
      in_select = true,
    },
    rename_in_select = true,
    -- show symbols in winbar must nightly
    -- in_custom mean use lspsaga api to get symbols
    -- and set it to your custom winbar or some winbar plugins.
    -- if in_cusomt = true you must set in_enable to false
    symbol_in_winbar = {
      in_custom = false,
      -- DISABLE WINBAR
      enable = false,
      separator = "Ôëä ",
      show_file = true,
      -- define how to customize filename, eg: %:., %
      -- if not set, use default value `%:t`
      -- more information see `vim.fn.expand` or `expand`
      -- ## only valid after set `show_file = true`
      file_formatter = "",
      click_support = false,
    },
    beacon = {
      enable = false,
      frequency = 7,
    },
    -- show outline
    show_outline = {
      win_position = "right",
      --set special filetype win that outline window split.like NvimTree neotree
      -- defx, db_ui
      win_with = "",
      win_width = 30,
      auto_enter = true,
      auto_preview = true,
      virt_text = "‚îÉ",
      jump_key = "o",
      -- auto refresh when change buffer
      auto_refresh = true,
    },
    -- custom lsp kind
    -- usage { Field = 'color code'} or {Field = {your icon, your color code}}
    custom_kind = {},
    -- if you don't use nvim-lspconfig you must pass your server name and
    -- the related filetypes into this table
    -- like server_filetype_map = { metals = { "sbt", "scala" } }
    server_filetype_map = {},
  })
end

return M
